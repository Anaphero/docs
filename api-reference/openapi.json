{
  "openapi": "3.0.1",
  "info": {
    "title": "OpenAPI Plant Store",
    "description": "A sample API that uses a plant store as an example to demonstrate features in the OpenAPI specification",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.clarionhealth.com/v1"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "description": "Returns the health status of the API",
        "responses": {
          "200": {
            "description": "API is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/call": {
      "get": {
        "description": "Returns all calls available to your organization",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return. Defaults to 100, maximum is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "createdAtGe",
            "in": "query",
            "description": "Filter calls created on or after this date (ISO 8601 format)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "createdAtLe",
            "in": "query",
            "description": "Filter calls created on or before this date (ISO 8601 format)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List Calls",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Call"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create new call",
        "requestBody": {
          "description": "Call to add to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCall"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Call response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Call"
                }
              }
            }
          }
        }
      }
    },
    "/assistant/{assistantId}": {
      "get": {
        "description": "Returns a single assistant based on the assistantId supplied",
        "parameters": [
          {
            "name": "assistantId",
            "in": "path",
            "description": "ID of assistant to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assistant response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assistant"
                }
              }
            }
          }
        }
      },

      "patch": {
        "description": "Updates an existing assistant",
        "parameters": [
          {
            "name": "assistantId",
            "in": "path",
            "description": "ID of assistant to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Assistant properties to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssistant"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Assistant updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assistant"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Assistant not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },

      "delete": {
        "description": "Deletes a single assistant based on the assistantId supplied",
        "parameters": [
          {
            "name": "assistantId",
            "in": "path",
            "description": "ID of assistant to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Assistant deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assistant"
                }
              }
            }
          }
        }
      }
    },

    "/call/{callId}": {
      "get": {
        "description": "Returns a single call based on the callId supplied",
        "parameters": [
          {
            "name": "callId",
            "in": "path",
            "description": "ID of call to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Call response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Call"
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a single call based on the callId supplied",
        "parameters": [
          {
            "name": "callId",
            "in": "path",
            "description": "ID of call to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Call deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Call"
                }
              }
            }
          }
        }
      }
    },
    "/workflow/inbound-referral": {
      "post": {
        "description": "Create a new inbound referral",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "documentUrl": {
                    "type": "string",
                    "format": "uri"
                  },
                  "referringProviderFirstName": {
                    "type": "string",
                    "nullable": true
                  },
                  "referringProviderLastName": {
                    "type": "string",
                    "nullable": true
                  },
                  "referralReason": {
                    "type": "string",
                    "nullable": true
                  },
                  "referralType": {
                    "type": "string",
                    "enum": ["sleep", "pulmonology"]
                  },
                  "referredToLocationId": {
                    "type": "string",
                    "enum": ["2"]
                  },
                  "referredToProviderId": {
                    "type": "string",
                    "enum": ["77562", "74570", "75929"]
                  },
                  "patientData": {
                    "type": "object",
                    "properties": {
                      "mrn": {
                        "type": "string"
                      },
                      "sex": {
                        "type": "string",
                        "enum": ["male", "female", "other"],
                        "nullable": true
                      },
                      "firstName": {
                        "type": "string"
                      },
                      "lastName": {
                        "type": "string"
                      },
                      "dob": {
                        "type": "string",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}$"
                      },
                      "cellNumber": {
                        "type": "string",
                        "nullable": true
                      },
                      "homeNumber": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string",
                        "nullable": true
                      },
                      "insuranceName": {
                        "type": "string",
                        "nullable": true
                      },
                      "insuranceSubscriberName": {
                        "type": "string",
                        "nullable": true
                      },
                      "insuranceSequence": {
                        "type": "string",
                        "enum": ["primary", "secondary", "tertiary"],
                        "nullable": true
                      },
                      "address": {
                        "type": "object",
                        "properties": {
                          "street": {
                            "type": "string"
                          },
                          "city": {
                            "type": "string"
                          },
                          "state": {
                            "type": "string",
                            "enum": [
                              "AL",
                              "AK",
                              "AZ",
                              "AR",
                              "CA",
                              "CO",
                              "CT",
                              "DE",
                              "FL",
                              "GA",
                              "HI",
                              "ID",
                              "IL",
                              "IN",
                              "IA",
                              "KS",
                              "KY",
                              "LA",
                              "ME",
                              "MD",
                              "MA",
                              "MI",
                              "MN",
                              "MS",
                              "MO",
                              "MT",
                              "NE",
                              "NV",
                              "NH",
                              "NJ",
                              "NM",
                              "NY",
                              "NC",
                              "ND",
                              "OH",
                              "OK",
                              "OR",
                              "PA",
                              "RI",
                              "SC",
                              "SD",
                              "TN",
                              "TX",
                              "UT",
                              "VT",
                              "VA",
                              "WA",
                              "WV",
                              "WI",
                              "WY"
                            ]
                          },
                          "zipcode": {
                            "type": "string",
                            "pattern": "^\\d{5}(-\\d{4})?$"
                          }
                        },
                        "required": ["street", "city", "state", "zipcode"]
                      }
                    },
                    "required": [
                      "sex",
                      "homeNumber",
                      "firstName",
                      "lastName",
                      "dob"
                    ]
                  }
                },
                "required": [
                  "referralType",
                  "referredToLocationId",
                  "patientData"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Inbound referral created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      },
      "get": {
        "description": "Returns all referrals available to your organization",
        "responses": {
          "200": {
            "description": "List of Referrals",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Referral"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/phone-number/{id}": {
      "get": {
        "description": "Returns a single phone number based on the id supplied",
        "responses": {
          "200": {
            "description": "Phone number response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneNumber"
                }
              }
            }
          }
        }
      }
    },
    "/phone-number": {
      "get": {
        "description": "Lists all phone numbers available to your organization",
        "parameters": [
          {
            "name": "assistantId",
            "in": "query",
            "description": "Filter phone numbers by assistantId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Phone Numbers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/plants": {
      "get": {
        "description": "Returns all plants from the system that the user has access to",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plant response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Plant"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new plant in the store",
        "requestBody": {
          "description": "Plant to add to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPlant"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "plant response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plant"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/plants/{id}": {
      "delete": {
        "description": "Deletes a single plant based on the ID supplied",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of plant to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Plant deleted",
            "content": {}
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/assistant": {
      "get": {
        "description": "Returns all assistants available to your organization",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return. Defaults to 100, maximum is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "created_at_ge",
            "in": "query",
            "description": "Filter assistants created on or after this date (ISO 8601 format)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_at_le",
            "in": "query",
            "description": "Filter assistants created on or before this date (ISO 8601 format)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Assistants",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Assistant"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new assistant",
        "requestBody": {
          "description": "Assistant to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAssistant"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Assistant created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assistant"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/tool": {
      "get": {
        "operationId": "ToolController_findAll",
        "summary": "List Tools",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/FunctionTool",
                        "title": "FunctionTool"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "type",
                      "mapping": {
                        "function": "#/components/schemas/FunctionTool"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "ToolController_create",
        "summary": "Create Tool",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateFunctionToolDTO",
                    "title": "FunctionTool"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "function": "#/components/schemas/CreateFunctionToolDTO"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/FunctionTool",
                      "title": "FunctionTool"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "function": "#/components/schemas/FunctionTool"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tool/{id}": {
      "get": {
        "operationId": "ToolController_findOne",
        "summary": "Get Tool",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/FunctionTool",
                      "title": "FunctionTool"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "function": "#/components/schemas/FunctionTool"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "ToolController_update",
        "summary": "Update Tool",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateToolDTO" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/FunctionTool",
                      "title": "FunctionTool"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "function": "#/components/schemas/FunctionTool"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "ToolController_remove",
        "summary": "Delete Tool",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/FunctionTool",
                      "title": "FunctionTool"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "function": "#/components/schemas/FunctionTool"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },

  "components": {
    "schemas": {
      "CreateFunctionToolDTO": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "type": {
            "type": "string",
            "enum": ["function"],
            "description": "The type of tool. \"function\" for Function tool."
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor `endCall`, `transferCall`, and `dtmf` tools, this is auto-filled based on tool-specific fields like `tool.destinations`. But, even in those cases, you can provide a custom function definition for advanced use cases.\n\nAn example of an advanced use case is if you want to customize the message that's spoken for `endCall` tool. You can specify a function where it returns an argument \"reason\". Then, in `messages` array, you can have many \"request-complete\" messages. One of these messages will be triggered if the `messages[].conditions` matches the \"reason\" argument.",
            "allOf": [{ "$ref": "#/components/schemas/OpenAIFunction" }]
          }
        },
        "required": ["type"]
      },
      "UpdateToolDTO": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },

          "function": {
            "description": "This is the function definition of the tool.\n\nFor `endCall`, `transferCall`, and `dtmf` tools, this is auto-filled based on tool-specific fields like `tool.destinations`. But, even in those cases, you can provide a custom function definition for advanced use cases.\n\nAn example of an advanced use case is if you want to customize the message that's spoken for `endCall` tool. You can specify a function where it returns an argument \"reason\". Then, in `messages` array, you can have many \"request-complete\" messages. One of these messages will be triggered if the `messages[].conditions` matches the \"reason\" argument.",
            "allOf": [{ "$ref": "#/components/schemas/OpenAIFunction" }]
          }
        }
      },
      "TextContent": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["text"] },
          "text": { "type": "string" },
          "language": {
            "type": "string",
            "enum": [
              "aa",
              "ab",
              "ae",
              "af",
              "ak",
              "am",
              "an",
              "ar",
              "as",
              "av",
              "ay",
              "az",
              "ba",
              "be",
              "bg",
              "bh",
              "bi",
              "bm",
              "bn",
              "bo",
              "br",
              "bs",
              "ca",
              "ce",
              "ch",
              "co",
              "cr",
              "cs",
              "cu",
              "cv",
              "cy",
              "da",
              "de",
              "dv",
              "dz",
              "ee",
              "el",
              "en",
              "eo",
              "es",
              "et",
              "eu",
              "fa",
              "ff",
              "fi",
              "fj",
              "fo",
              "fr",
              "fy",
              "ga",
              "gd",
              "gl",
              "gn",
              "gu",
              "gv",
              "ha",
              "he",
              "hi",
              "ho",
              "hr",
              "ht",
              "hu",
              "hy",
              "hz",
              "ia",
              "id",
              "ie",
              "ig",
              "ii",
              "ik",
              "io",
              "is",
              "it",
              "iu",
              "ja",
              "jv",
              "ka",
              "kg",
              "ki",
              "kj",
              "kk",
              "kl",
              "km",
              "kn",
              "ko",
              "kr",
              "ks",
              "ku",
              "kv",
              "kw",
              "ky",
              "la",
              "lb",
              "lg",
              "li",
              "ln",
              "lo",
              "lt",
              "lu",
              "lv",
              "mg",
              "mh",
              "mi",
              "mk",
              "ml",
              "mn",
              "mr",
              "ms",
              "mt",
              "my",
              "na",
              "nb",
              "nd",
              "ne",
              "ng",
              "nl",
              "nn",
              "no",
              "nr",
              "nv",
              "ny",
              "oc",
              "oj",
              "om",
              "or",
              "os",
              "pa",
              "pi",
              "pl",
              "ps",
              "pt",
              "qu",
              "rm",
              "rn",
              "ro",
              "ru",
              "rw",
              "sa",
              "sc",
              "sd",
              "se",
              "sg",
              "si",
              "sk",
              "sl",
              "sm",
              "sn",
              "so",
              "sq",
              "sr",
              "ss",
              "st",
              "su",
              "sv",
              "sw",
              "ta",
              "te",
              "tg",
              "th",
              "ti",
              "tk",
              "tl",
              "tn",
              "to",
              "tr",
              "ts",
              "tt",
              "tw",
              "ty",
              "ug",
              "uk",
              "ur",
              "uz",
              "ve",
              "vi",
              "vo",
              "wa",
              "wo",
              "xh",
              "yi",
              "yue",
              "yo",
              "za",
              "zh",
              "zu"
            ]
          }
        },
        "required": ["type", "text", "language"]
      },
      "ToolMessageStart": {
        "type": "object",
        "properties": {
          "contents": {
            "type": "array",
            "description": "This is an alternative to the `content` property. It allows to specify variants of the same content, one per language.\n\nUsage:\n- If your assistants are multilingual, you can provide content for each language.\n- If you don't provide content for a language, the first item in the array will be automatically translated to the active language at that moment.\n\nThis will override the `content` property.",
            "items": {
              "oneOf": [
                { "$ref": "#/components/schemas/TextContent", "title": "Text" }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": ["request-start"],
            "description": "This message is triggered when the tool call starts.\n\nThis message is never triggered for async tools.\n\nIf this message is not provided, one of the default filler messages \"Hold on a sec\", \"One moment\", \"Just a sec\", \"Give me a moment\" or \"This'll just take a sec\" will be used."
          },
          "content": {
            "type": "string",
            "description": "This is the content that the assistant says when this message is triggered.",
            "maxLength": 1000
          },
          "conditions": {
            "description": "This is an optional array of conditions that the tool call arguments must meet in order for this message to be triggered.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Condition" }
          }
        },
        "required": ["type"]
      },
      "Condition": {
        "type": "object",
        "properties": {
          "operator": {
            "type": "string",
            "description": "This is the operator you want to use to compare the parameter and value.",
            "enum": ["eq", "neq", "gt", "gte", "lt", "lte"]
          },
          "param": {
            "type": "string",
            "description": "This is the name of the parameter that you want to check.",
            "maxLength": 1000
          },
          "value": {
            "type": "object",
            "description": "This is the value you want to compare against the parameter.",
            "maxLength": 1000
          }
        },
        "required": ["operator", "param", "value"]
      },
      "JsonSchema": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of output you'd like.\n\n`string`, `number`, `integer`, `boolean` are the primitive types and should be obvious.\n\n`array` and `object` are more interesting and quite powerful. They allow you to define nested structures.\n\nFor `array`, you can define the schema of the items in the array using the `items` property.\n\nFor `object`, you can define the properties of the object using the `properties` property.",
            "enum": [
              "string",
              "number",
              "integer",
              "boolean",
              "array",
              "object"
            ]
          },
          "items": {
            "type": "object",
            "description": "This is required if the type is \"array\". This is the schema of the items in the array.\n\nThis is of type JsonSchema. However, Swagger doesn't support circular references."
          },
          "properties": {
            "type": "object",
            "description": "This is required if the type is \"object\". This specifies the properties of the object.\n\nThis is a map of string to JsonSchema. However, Swagger doesn't support circular references."
          },
          "description": {
            "type": "string",
            "description": "This is the description to help the model understand what it needs to output."
          },
          "required": {
            "description": "This is a list of properties that are required.\n\nThis only makes sense if the type is \"object\".",
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": ["type"]
      },
      "ToolMessageComplete": {
        "type": "object",
        "properties": {
          "contents": {
            "type": "array",
            "description": "This is an alternative to the `content` property. It allows to specify variants of the same content, one per language.\n\nUsage:\n- If your assistants are multilingual, you can provide content for each language.\n- If you don't provide content for a language, the first item in the array will be automatically translated to the active language at that moment.\n\nThis will override the `content` property.",
            "items": {
              "oneOf": [
                { "$ref": "#/components/schemas/TextContent", "title": "Text" }
              ]
            }
          },
          "type": {
            "type": "string",
            "description": "This message is triggered when the tool call is complete.\n\nThis message is triggered immediately without waiting for your server to respond for async tool calls.\n\nIf this message is not provided, the model will be requested to respond.\n\nIf this message is provided, only this message will be spoken and the model will not be requested to come up with a response. It's an exclusive OR.",
            "enum": ["request-complete"]
          },
          "role": {
            "type": "string",
            "description": "This is optional and defaults to \"assistant\".\n\nWhen role=assistant, `content` is said out loud.\n\nWhen role=system, `content` is passed to the model in a system message. Example:\n    system: default one\n    assistant:\n    user:\n    assistant:\n    user:\n    assistant:\n    user:\n    assistant: tool called\n    tool: your server response\n    <--- system prompt as hint\n    ---> model generates response which is spoken\nThis is useful when you want to provide a hint to the model about what to say next.",
            "enum": ["assistant", "system"]
          },
          "endCallAfterSpokenEnabled": {
            "type": "boolean",
            "description": "This is an optional boolean that if true, the call will end after the message is spoken. Default is false.\n\nThis is ignored if `role` is set to `system`.\n\n@default false",
            "example": false
          },
          "content": {
            "type": "string",
            "description": "This is the content that the assistant says when this message is triggered.",
            "maxLength": 1000
          },
          "conditions": {
            "description": "This is an optional array of conditions that the tool call arguments must meet in order for this message to be triggered.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Condition" }
          }
        },
        "required": ["type"]
      },
      "ToolMessageFailed": {
        "type": "object",
        "properties": {
          "contents": {
            "type": "array",
            "description": "This is an alternative to the `content` property. It allows to specify variants of the same content, one per language.\n\nUsage:\n- If your assistants are multilingual, you can provide content for each language.\n- If you don't provide content for a language, the first item in the array will be automatically translated to the active language at that moment.\n\nThis will override the `content` property.",
            "items": {
              "oneOf": [
                { "$ref": "#/components/schemas/TextContent", "title": "Text" }
              ]
            }
          },
          "type": {
            "type": "string",
            "description": "This message is triggered when the tool call fails.\n\nThis message is never triggered for async tool calls.\n\nIf this message is not provided, the model will be requested to respond.\n\nIf this message is provided, only this message will be spoken and the model will not be requested to come up with a response. It's an exclusive OR.",
            "enum": ["request-failed"]
          },
          "endCallAfterSpokenEnabled": {
            "type": "boolean",
            "description": "This is an optional boolean that if true, the call will end after the message is spoken. Default is false.\n\n@default false",
            "example": false
          },
          "content": {
            "type": "string",
            "description": "This is the content that the assistant says when this message is triggered.",
            "maxLength": 1000
          },
          "conditions": {
            "description": "This is an optional array of conditions that the tool call arguments must meet in order for this message to be triggered.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Condition" }
          }
        },
        "required": ["type"]
      },
      "ToolMessageDelayed": {
        "type": "object",
        "properties": {
          "contents": {
            "type": "array",
            "description": "This is an alternative to the `content` property. It allows to specify variants of the same content, one per language.\n\nUsage:\n- If your assistants are multilingual, you can provide content for each language.\n- If you don't provide content for a language, the first item in the array will be automatically translated to the active language at that moment.\n\nThis will override the `content` property.",
            "items": {
              "oneOf": [
                { "$ref": "#/components/schemas/TextContent", "title": "Text" }
              ]
            }
          },
          "type": {
            "type": "string",
            "description": "This message is triggered when the tool call is delayed.\n\nThere are the two things that can trigger this message:\n1. The user talks with the assistant while your server is processing the request. Default is \"Sorry, a few more seconds.\"\n2. The server doesn't respond within `timingMilliseconds`.\n\nThis message is never triggered for async tool calls.",
            "enum": ["request-response-delayed"]
          },
          "timingMilliseconds": {
            "type": "number",
            "minimum": 100,
            "maximum": 120000,
            "example": 1000,
            "description": "The number of milliseconds to wait for the server response before saying this message."
          },
          "content": {
            "type": "string",
            "description": "This is the content that the assistant says when this message is triggered.",
            "maxLength": 1000
          },
          "conditions": {
            "description": "This is an optional array of conditions that the tool call arguments must meet in order for this message to be triggered.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Condition" }
          }
        },
        "required": ["type"]
      },
      "FunctionTool": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },

          "type": {
            "type": "string",
            "enum": ["function"],
            "description": "The type of tool. \"function\" for Function tool."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the tool."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the organization that this tool belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the tool was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the tool was last updated."
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor `endCall`, `transferCall`, and `dtmf` tools, this is auto-filled based on tool-specific fields like `tool.destinations`. But, even in those cases, you can provide a custom function definition for advanced use cases.\n\nAn example of an advanced use case is if you want to customize the message that's spoken for `endCall` tool. You can specify a function where it returns an argument \"reason\". Then, in `messages` array, you can have many \"request-complete\" messages. One of these messages will be triggered if the `messages[].conditions` matches the \"reason\" argument.",
            "allOf": [{ "$ref": "#/components/schemas/OpenAIFunction" }]
          }
        },
        "required": ["type", "id", "orgId", "createdAt", "updatedAt"]
      },
      "OpenAIFunctionParameters": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This must be set to 'object'. It instructs the model to return a JSON object containing the function call properties.",
            "enum": ["object"]
          },
          "properties": {
            "type": "object",
            "description": "This provides a description of the properties required by the function.\nJSON Schema can be used to specify expectations for each property.\nRefer to [this doc](https://ajv.js.org/json-schema.html#json-data-type) for a comprehensive guide on JSON Schema.",
            "additionalProperties": {
              "$ref": "#/components/schemas/JsonSchema"
            }
          },
          "required": {
            "description": "This specifies the properties that are required by the function.",
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": ["type", "properties"]
      },
      "OpenAIFunction": {
        "type": "object",
        "properties": {
          "strict": {
            "type": "boolean",
            "description": "This is a boolean that controls whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the parameters field. Only a subset of JSON Schema is supported when strict is true. Learn more about Structured Outputs in the [OpenAI guide](https://openai.com/index/introducing-structured-outputs-in-the-api/).\n\n@default false",
            "default": false
          },
          "name": {
            "type": "string",
            "description": "This is the the name of the function to be called.\n\nMust be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
            "maxLength": 64,
            "pattern": "/^[a-zA-Z0-9_-]{1,64}$/"
          },
          "description": {
            "type": "string",
            "description": "This is the description of what the function does, used by the AI to choose when and how to call the function.",
            "maxLength": 1000
          },
          "parameters": {
            "description": "These are the parameters the functions accepts, described as a JSON Schema object.\n\nSee the [OpenAI guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema) for documentation about the format.\n\nOmitting parameters defines a function with an empty parameter list.",
            "allOf": [
              { "$ref": "#/components/schemas/OpenAIFunctionParameters" }
            ]
          }
        },
        "required": ["name"]
      },
      "Assistant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier for the assistant"
          },
          "name": {
            "type": "string",
            "description": "The name of the assistant"
          },
          "organization_id": {
            "type": "integer",
            "description": "The identifier of the organization the assistant belongs to"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the assistant was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the assistant was last updated"
          },
          "model": {
            "type": "object",
            "description": "The language model configuration for the assistant"
          },
          "voice": {
            "type": "object",
            "description": "The voice model configuration for the assistant"
          },
          "first_message": {
            "type": "string",
            "description": "The initial message the assistant will use"
          },
          "max_duration_seconds": {
            "type": "integer",
            "description": "The maximum duration in seconds for the assistant's interaction"
          },
          "voicemail_message": {
            "type": "string",
            "description": "The message the assistant will leave as a voicemail"
          },
          "webhook_url": {
            "type": "string",
            "description": "The URL the assistant will send the end of call report to"
          },
          "is_webhook_secret_set": {
            "type": "boolean",
            "description": "Whether a secret is set for the webhook"
          },
          "analysis_plan": {
            "type": "object",
            "description": "The analysis plan for the assistant"
          }
        },
        "required": [
          "id",
          "name",
          "organization_id",
          "created_at",
          "updated_at"
        ]
      },
      "PhoneNumber": {
        "required": ["phoneNumberId", "number", "telephonyProvider"],
        "type": "object",
        "properties": {
          "id": {
            "description": "The unique id for the phone number",
            "type": "integer"
          },
          "organization_id": {
            "description": "The id of the organization the phone number belongs to",
            "type": "integer"
          },
          "name": {
            "description": "The human-friendly name of the phone number",
            "type": "string"
          },
          "assistant_id": {
            "description": "The id of the assistant that the phone number is associated with for inbound calls",
            "type": "integer"
          },
          "number": {
            "description": "The phone number with country code",
            "type": "string"
          }
        }
      },
      "CreateCall": {
        "required": ["taskId", "destinationNumberId"],
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the call for your own reference",
            "type": "string",
            "maxLength": 50
          },
          "assistant_id": {
            "description": "The id of the assistant to use for the call",
            "type": "number"
          },
          "source_phone_number_id": {
            "description": "The phoneNumberId of the phone number that will be used to make the call",
            "type": "number"
          },
          "destination_phone_number": {
            "description": "The phone number with area code of the number you would like to call (ex: +138726394823)",
            "type": "string"
          },
          "task_parameters": {
            "description": "Any override setting you would like to pass into the assistant configuration.",
            "type": "object"
          }
        }
      },
      "Call": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The unique id for the call",
            "type": "integer"
          },
          "assistant_id": {
            "description": "The id of the assistant that handled the call",
            "type": "integer"
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time the call was started",
            "nullable": true
          },
          "ended_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time the call ended",
            "nullable": true
          },
          "call_status": {
            "type": "string",
            "description": "The status of the call",
            "enum": ["queued", "ringing", "in-progress", "forwarding", "ended"]
          },
          "ended_reason": {
            "type": "string",
            "description": "The reason why the call ended",
            "nullable": true
          },
          "transcript": {
            "type": "string",
            "description": "The transcript of the call",
            "nullable": true
          },
          "source_number": {
            "type": "string",
            "description": "The phone number that initiated the call",
            "nullable": true
          },
          "destination_number": {
            "type": "string",
            "description": "The phone number that received the call",
            "nullable": true
          },
          "call_type": {
            "type": "string",
            "description": "The type of call"
          },
          "messages": {
            "type": "array",
            "description": "Structured messages representing the events of the conversation",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/UserMessage",
                  "title": "UserMessage"
                },
                {
                  "$ref": "#/components/schemas/SystemMessage",
                  "title": "SystemMessage"
                },
                {
                  "$ref": "#/components/schemas/BotMessage",
                  "title": "BotMessage"
                },
                {
                  "$ref": "#/components/schemas/ToolCallMessage",
                  "title": "ToolCallMessage"
                },
                {
                  "$ref": "#/components/schemas/ToolCallResultMessage",
                  "title": "ToolCallResultMessage"
                }
              ]
            }
          },
          "duration_ms": {
            "type": "integer",
            "description": "The duration of the call in milliseconds",
            "nullable": true
          },
          "analysis": {
            "type": "object",
            "description": "Any analysis performed on the call",
            "nullable": true
          },
          "summary": {
            "type": "string",
            "description": "A summary of the call",
            "nullable": true
          },
          "outcome": {
            "type": "string",
            "description": "The outcome of the call",
            "nullable": true
          }
        }
      },
      "UserMessage": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "The role of the user in the conversation."
          },
          "message": {
            "type": "string",
            "description": "The message content from the user."
          },
          "time": {
            "type": "number",
            "description": "The timestamp when the message was sent."
          },
          "endTime": {
            "type": "number",
            "description": "The timestamp when the message ended."
          },
          "secondsFromStart": {
            "type": "number",
            "description": "The number of seconds from the start of the conversation."
          },
          "duration": {
            "type": "number",
            "description": "The duration of the message in seconds."
          }
        },
        "required": ["role", "message", "time", "endTime", "secondsFromStart"]
      },
      "SystemMessage": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "The role of the system in the conversation."
          },
          "message": {
            "type": "string",
            "description": "The message content from the system."
          },
          "time": {
            "type": "number",
            "description": "The timestamp when the message was sent."
          },
          "secondsFromStart": {
            "type": "number",
            "description": "The number of seconds from the start of the conversation."
          }
        },
        "required": ["role", "message", "time", "secondsFromStart"]
      },
      "BotMessage": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "The role of the bot in the conversation."
          },
          "message": {
            "type": "string",
            "description": "The message content from the bot."
          },
          "time": {
            "type": "number",
            "description": "The timestamp when the message was sent."
          },
          "endTime": {
            "type": "number",
            "description": "The timestamp when the message ended."
          },
          "secondsFromStart": {
            "type": "number",
            "description": "The number of seconds from the start of the conversation."
          },
          "source": {
            "type": "string",
            "description": "The source of the message."
          },
          "duration": {
            "type": "number",
            "description": "The duration of the message in seconds."
          }
        },
        "required": ["role", "message", "time", "endTime", "secondsFromStart"]
      },
      "ToolCallMessage": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "The role of the tool call in the conversation."
          },
          "toolCalls": {
            "description": "The list of tool calls made during the conversation.",
            "type": "array",
            "items": { "type": "object" }
          },
          "message": {
            "type": "string",
            "description": "The message content for the tool call."
          },
          "time": {
            "type": "number",
            "description": "The timestamp when the message was sent."
          },
          "secondsFromStart": {
            "type": "number",
            "description": "The number of seconds from the start of the conversation."
          }
        },
        "required": ["role", "toolCalls", "message", "time", "secondsFromStart"]
      },
      "ToolCallResultMessage": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "The role of the tool call result in the conversation."
          },
          "toolCallId": {
            "type": "string",
            "description": "The ID of the tool call."
          },
          "name": {
            "type": "string",
            "description": "The name of the tool that returned the result."
          },
          "result": {
            "type": "string",
            "description": "The result of the tool call in JSON format."
          },
          "time": {
            "type": "number",
            "description": "The timestamp when the message was sent."
          },
          "secondsFromStart": {
            "type": "number",
            "description": "The number of seconds from the start of the conversation."
          }
        },
        "required": [
          "role",
          "toolCallId",
          "name",
          "result",
          "time",
          "secondsFromStart"
        ]
      },
      "Plant": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the plant",
            "type": "string"
          },
          "tag": {
            "description": "Tag to specify the type",
            "type": "string"
          }
        }
      },
      "NewPlant": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Plant"
          },
          {
            "required": ["id"],
            "type": "object",
            "properties": {
              "id": {
                "description": "Identification number of the plant",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "Error": {
        "required": ["error", "message"],
        "type": "object",
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      },

      "Referral": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "organization_id": {
            "type": "integer"
          },
          "patient_id": {
            "type": "integer"
          },
          "workflow_id": {
            "type": "integer"
          },
          "referral_source": {
            "type": "string"
          },
          "date_referral_received_by_clinic": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "appointment_id": {
            "type": "integer",
            "nullable": true
          },
          "referral_reason": {
            "type": "string"
          },
          "referring_provider": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "referred_to_location_id": {
            "type": "string"
          },
          "referred_to_provider_id": {
            "type": "string"
          },
          "appointment": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "patient_id": {
                "type": "integer"
              },
              "location_id": {
                "type": "string"
              },
              "provider_id": {
                "type": "string"
              },
              "appointment_type": {
                "type": "string"
              },
              "appointment_datetime": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "patient": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "mrn": {
                "type": "string"
              },
              "email": {
                "type": "string",
                "format": "email"
              },
              "last_name": {
                "type": "string"
              },
              "first_name": {
                "type": "string"
              },
              "cell_number": {
                "type": "string"
              },
              "home_number": {
                "type": "string"
              },
              "date_of_birth": {
                "type": "string",
                "format": "date"
              }
            }
          }
        }
      },
      "UpdateAssistant": {
        "type": "object",
        "properties": {
          "model": {
            "type": "object",
            "description": "The updated language model configuration for the assistant"
          },

          "first_message": {
            "type": "string",
            "description": "The updated initial message the assistant will use"
          },

          "webhook_url": {
            "type": "string",
            "description": "The updated URL the assistant will send the end of call report to"
          },
          "analysis_plan": {
            "type": "object",
            "description": "The updated analysis plan for the assistant"
          }
        }
      },
      "CreateAssistant": {
        "type": "object",
        "required": ["name", "model"],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the assistant"
          },
          "model": {
            "type": "object",
            "description": "The language model configuration for the assistant"
          },
          "first_message": {
            "type": "string",
            "description": "The initial message the assistant will use"
          },
          "webhook_url": {
            "type": "string",
            "description": "The URL the assistant will send the end of call report to"
          },
          "analysis_plan": {
            "type": "object",
            "description": "The analysis plan for the assistant"
          }
        }
      },
      "Tool": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the tool"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
